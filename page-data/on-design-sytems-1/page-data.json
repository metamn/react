{"componentChunkName":"component---src-templates-blog-post-js","path":"/on-design-sytems-1/","webpackCompilationHash":"e24f080e93f662bc24cd","result":{"data":{"site":{"siteMetadata":{"title":":heart: React","author":"Metamn"}},"markdownRemark":{"id":"be5007ec-73e7-5a92-9a69-877db2821340","excerpt":"Context and deliverables.","html":"<p>Context and deliverables.</p>\n<!--more-->\n<hr>\n<h2>Update</h2>\n<p>This post was heavily edited on 10th of November 2021, when <a href=\"http://metamn.io/react/on-design-sytems-2/\">another take</a> on the subject was published.</p>\n<p>The posts are complementary.</p>\n<p>This is a high level overview, focusing on deliverables.\nThe second take is more technical, focusing on tools and processes.</p>\n<h2>A short history</h2>\n<p>Design systems have been around since 2013-2014.</p>\n<p>Lonely Planet’s <a href=\"https://github.com/lonelyplanet/rizzo\">Rizzo</a> was the early bird, then followed by the well-known <a href=\"https://github.com/mui-org/material-ui\">Material UI</a> implementing Google’s <a href=\"https://material.io/\">Material Design</a>.</p>\n<p>2020 was the year when design systems popped up every week. <a href=\"https://adele.uxpin.com/\">Adele</a> of UXPin lists over a hundred systems and libraries—yet the list is incomplete.</p>\n<h2>Purpose and audience</h2>\n<p>Why companies create design systems? A <a href=\"https://docs.google.com/spreadsheets/d/1Yn-fzRIfXcpFilQwjv62MC4yRCTQFaS2qhhtbnfohhg/edit?usp=sharing\">quick analysis</a> reveals the main goals:</p>\n<ul>\n<li>Internal: To build apps for their brand and/or platform.</li>\n<li>External: To build general purpose apps.</li>\n<li>Foundational: To help build design systems and component libraries.</li>\n</ul>\n<p>The majority builds internal systems—no wonder—design systems shine when used to create uniform looking products across a portfolio.</p>\n<p>A handful of companies create general purpose systems. More precisely, they create an internal system and share to the public.</p>\n<p>This generosity links to the company size: Google, IBM, Ant, Adobe can afford to open-source code worth millions:</p>\n<blockquote>\n<p>This represents millions of dollars of investment for each company to duplicate work that many other companies are also doing. — <a href=\"https://react-spectrum.adobe.com/react-aria/why.html\">Adobe Spectrum</a></p>\n</blockquote>\n<p>Foundational systems represent a new business model—<a href=\"https://www.modulz.app/\">Modulz</a> helps teams create design systems without writing code—or <a href=\"https://bold.bridge.ufsc.br/en/about/\">institutions</a> sharing their work for the common good.</p>\n<h2>Type</h2>\n<p>The terms design system and component library are often interchanged. The difference is subtle and far-reaching.</p>\n<blockquote>\n<p>The difference between a component library and a design system is whether or not your components have ’className’ and ’style’ props. — <a href=\"https://twitter.com/markdalgleish/status/1308330959973027846?ref_src=twsrc%5Etfw\">Mark Dalgleish</a></p>\n</blockquote>\n<p>Design systems are strict. They form a complete system. They don’t allow on-the-fly customisation. Modifying a system is possible at a well-defined entry point, then changes reflect across the site automatically.</p>\n<p>Component libraries are loose. They offer the basics and let customisation happen at any point, any time.</p>\n<p>Design systems are more expensive to create, and easier to use later. <a href=\"https://seek-oss.github.io/braid-design-system/\">Braid’s Playroom</a> shows even non-devs can create with a design system.</p>\n<h2>Features</h2>\n<p>Purpose and audience defines a design system’s features.</p>\n<p>While purpose, audience and type overlap, features differentiate and define the unique characteristics of a design system.</p>\n<p>Material Design goes full circle. From top-bottom connects designers and their tools with developers of all platforms and technologies. From Figma to web and native apps everything is in a system.</p>\n<p><a href=\"https://radix-ui.com/primitives/docs/overview/introduction\">Radix</a> from Modulz is bare bones to that level of not offering any styling.</p>\n<p><a href=\"https://react-spectrum.adobe.com/index.html\">Spectrum</a> from Adobe offers support for server-side rendering, virtual lists, state management and accessibility for anybody building design systems.</p>\n<h2>Common practices</h2>\n<p>This quick <a href=\"https://docs.google.com/spreadsheets/d/1Yn-fzRIfXcpFilQwjv62MC4yRCTQFaS2qhhtbnfohhg/edit?usp=sharing\">design systems analysis</a> reveals common practices covering theory, technology and usability.</p>\n<h3>Theory</h3>\n<p>Theory is important. Drives design decisions. It’s good to have a solid foundation and principles enduring years.</p>\n<p>Design systems have no common theoretical foundation yet. Everybody rolls their own, following—or not—design patterns.</p>\n<p>The patterns listed below come compiled from the analysed systems.</p>\n<p><a href=\"https://polaris.shopify.com/\">Shopify Polaris</a> and <a href=\"https://react-spectrum.adobe.com/index.html\">Adobe Spectrum</a> are implementing all these patterns to a certain extent. The rest implements none, or part of them.</p>\n<h4>Single Source of Truth (SST)</h4>\n<p>Design systems collect settings under a common place. Any later change goes into this single source of truth and reflects across the system automatically.</p>\n<p>This reduces the cognitive load to manage and extend the system.</p>\n<h4>Single Responsibility Principle (SRP)</h4>\n<p>Design systems contain dozens, hundreds of tokens and components. Wiring them into a system is not a trivial task.</p>\n<p><a href=\"http://metamn.io/react/the-reactive-fuctional-nature-of-react/\">Functional programming</a> advocates the idea of composing up a system from smaller parts is the best possible when the underlying components behave predictably.</p>\n<p>Independent components—self-contained, with stable interfaces— compose better and provide modular architecture.</p>\n<h4>The base / variant pattern (BEM)</h4>\n<p>In <a href=\"https://www.slideshare.net/MajaWichrowska/building-and-rebuilding-the-airbnb-design-system\">Building (and Re-Building) the Airbnb Design System</a> an old pattern, <a href=\"http://getbem.com/introduction/\">BEM</a>, emerges as a solution for scalability.</p>\n<p>Keeping a simple base and following simple rules for extensions scales up the source code and reduces its complexity.</p>\n<h3>Technology</h3>\n<p>In contrast to theory, technology is well-defined on the design systems scene.</p>\n<p>The majority of the solutions goes with <strong>Typescript</strong> and <strong>CSS-in-JS</strong>. All solutions embrace packaging and publishing to NPM. Half of them via a <strong>monorepo</strong>.</p>\n<p>Testing isn’t fully satisfactory. The majority does <strong>unit testing</strong> using <strong>ts-jest</strong> and <strong>React Testing Library</strong> with questionable coverage.</p>\n<p>Often times, <strong>Storybook</strong> complements missing unit tests and mocks integration tests with visual tests.</p>\n<p>Storybook mocks also documentation.</p>\n<p><a href=\"https://bold.bridge.ufsc.br/en/\">Bold</a> alone managed to come up with a good-looking Storybook for their API docs. The rest uses Storybook to complement their documentation suite, which results in a scattered user experience—two separate apps with different look-and-feel.</p>\n<p>The big players—again—managed to come up with an <strong>in-house, integrated documentation</strong> tool reaching UX excellence.</p>\n<p>What’s missing from the majority of solutions is <strong>generated documentation (JSDoc)</strong>. Manual, handwritten documentation—no matter what—breaks from the source code’s reality.</p>\n<h3>Usability</h3>\n<p>Design systems have <em>users</em> who build solutions with the system without extending it, and have <em>devs</em> who build / adapt / tweak new design systems from the existing system.</p>\n<p>The first group values <strong>User Experience (UX)</strong> while the second group longs for <strong>Developer Experience (DX)</strong>.</p>\n<p>The groups overlap. Important is to examine design systems from these two perspectives instead of a single one.</p>\n<h4>Documentation</h4>\n<p>For users, the significant feature is the documentation. This is the entry point where they meet the design system.</p>\n<p>From the analysis, <a href=\"https://www.carbondesignsystem.com/\">IBM’s Carbon</a> turned out the most complete, offering the following features:</p>\n<ul>\n<li>Impeccable UX of the documentation site.</li>\n<li>Integrated: All docs (API, Guide) integrated into a single application.</li>\n<li>Generated: Entries generated from JSDoc, MDX, tests instead of written separately.</li>\n<li>Searchable.</li>\n<li>Well-explained props.</li>\n<li>Every prop comes with its own example.</li>\n<li>Live editor for examples.</li>\n</ul>\n<h4>API</h4>\n<p>For users, another significant feature is the usability of the API.\nNamely:</p>\n<ul>\n<li>Importing components.<p><code class=\"language-text\">import ../../...</code> won’t do it. <code class=\"language-text\">import @package/</code> will do it.</p></li>\n<li>Fewer props.<p><code class=\"language-text\">&lt;Card as=&#39;thumbnail&#39;&gt;</code> is better than <code class=\"language-text\">&lt;Card image={true} title=&#39;H3&#39; excerpt={true}&gt;</code></p></li>\n<li>Consistent naming.<p><code class=\"language-text\">&lt;Button as=&#39;link&#39;&gt;</code> and <code class=\"language-text\">&lt;Heading level={3}&gt;</code> won’t do it. <code class=\"language-text\">&lt;Heading as=&#39;H3&#39;&gt;</code> is better.</p></li>\n</ul>\n<p>Having a clean and consistent API is art. It takes iterations to achieve simplicity. <a href=\"https://seek-oss.github.io/braid-design-system/\">Braid</a> offers this feature as a unique selling point:</p>\n<blockquote>\n<p>We’re aggressively focused on the simplicity and composability of its API.</p>\n</blockquote>\n<h4>Example apps</h4>\n<p>Show, don’t tell. An example worth thousands of words.</p>\n<p>After browsing the docs, a common practice is to check the examples to get a glimpse about the quality of the code.</p>\n<p>Yet half of the examined systems have no example apps. Or the code quality rings alarms.</p>\n<h4>Naming conventions</h4>\n<p>For developers, the <code class=\"language-text\">It Just Works!</code> factor is perhaps the most important.</p>\n<p>Finding parts of the system should be intuitive with as less cognitive load as possible.\nFrom the big picture—tokens, hooks, components, themes—to the details—button variations.</p>\n<p>The vertical integration of the layers should be clear and well-thought.\nThe <code class=\"language-text\">token -&gt; theme -&gt; hook -&gt; component</code> path should be easy to follow when extending the system.</p>\n<h4>Guidelines for design principles</h4>\n<p>Design decisions make or break a product.\nYet, documenting these decisions is often missing.</p>\n<p>Guidelines explaining design decisions reduce development time.\nOnce developers understand the theory behind, they’ll use the system as their own.</p>\n<h2>Summing up</h2>\n<p>Creating a design system or a component library starts with analysis and planning.\nThe goal of the process is to prepare the implementation.</p>\n<table>\n<thead>\n\t<tr>\n\t\t<th>Input</th>\n\t\t<th>Output</th>\n\t</tr>\n</thead>\n<tbody>\n\t<tr>\n\t\t<td>Purpose<br/>Audience<br/>Common practices</td>\n\t\t<td>Features<br/>Technologies<br/>Deliverables<br/>Theory</td>\n\t</tr>\n</tbody>\n</table>\n<p>Deliverables are standard. They follow a common practice.</p>\n<table>\n<thead>\n\t<tr>\n\t\t<th>Deliverable</th>\n\t\t<th>Features</th>\n\t</tr>\n</thead>\n<tbody>\n\t<tr>\n\t\t<td>Documentation</td>\n\t\t<td>Integrated<br/>Searchable<br/>Props<br/>Playground</td>\n\t</tr>\n\t<tr>\n\t\t<td>Example apps</td>\n\t\t<td>High-quality source code</td>\n\t</tr>\n\t<tr>\n\t\t<td>Guidelines</td>\n\t\t<td>For design decisions</td>\n\t</tr>\n</tbody>\n</table>\n<p>Standard theory is missing.\nHowever it should be built using existing software design patterns.</p>\n<table>\n<thead>\n\t<tr>\n\t\t<th>Theory</th>\n\t\t<th>Features</th>\n\t\t<th>Notes</th>\n\t</tr>\n</thead>\n<tbody>\n\t<tr>\n\t\t<td>Single Source of Truth (SST)</td>\n\t\t<td>All settings in one single place.</td>\n\t\t<td>Specific for design systems</td>\n\t</tr>\n\t<tr>\n\t\t<td>Single Responsibility Principle (SRP)</td>\n\t\t<td>Functional compositions<br/>Modular architecture</td>\n\t\t<td>Functional Reactive Programming</td>\n\t</tr>\n\t<tr>\n\t\t<td>The base / variant pattern (BEM)</td>\n\t\t<td>Scalability and simplicity</td>\n\t\t<td>A common practice</td>\n\t</tr>\n\t<tr>\n\t\t<td>Clean API</td>\n\t\t<td>Minimal props with uniform naming</td>\n\t\t<td>The hardest to achieve</td>\n\t</tr>\n\t<tr>\n\t\t<td>Folder structure</td>\n\t\t<td>Reduce cognitive load</td>\n\t\t<td>Find anything in no time</td>\n\t</tr>\n</tbody>\n</table>\n<h2>Resources</h2>\n<ul>\n<li><a href=\"https://adele.uxpin.com/\">Adele / UXPin - A repository of publicly available design systems and pattern libraries</a></li>\n<li><a href=\"https://docs.google.com/spreadsheets/d/1Yn-fzRIfXcpFilQwjv62MC4yRCTQFaS2qhhtbnfohhg/edit?usp=sharing\">A quick analysis of design systems and component libraries</a></li>\n<li><a href=\"https://www.slideshare.net/MajaWichrowska/building-and-rebuilding-the-airbnb-design-system\">Building (and Re-Building) the Airbnb Design System </a></li>\n<li><a href=\"https://www.youtube.com/watch?v=jnV1u67_yVg&#x26;feature=youtu.be\">Mark Dalgleish: Rethinking Design Practices</a></li>\n</ul>","frontmatter":{"title":"On design systems — 1","date":"January 06, 2021"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/on-design-sytems-1/","previous":{"excerpt":"For highly interactive, static websites without API.","fields":{"slug":"/my-current-stack/"},"frontmatter":{"title":"My current stack"}},"next":{"excerpt":"Where to destructure props, and assign default values to them.","fields":{"slug":"/on-function-signatures/"},"frontmatter":{"title":"On function signatures"}}}}}