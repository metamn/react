{"componentChunkName":"component---src-templates-blog-post-js","path":"/identify-the-right-leaders/","webpackCompilationHash":"4e1985a14b92e7367e74","result":{"data":{"site":{"siteMetadata":{"title":":heart: React","author":"Metamn"}},"markdownRemark":{"id":"fedd5b15-ca81-55c4-8fa2-c34bb3a2b379","excerpt":"Or else.","html":"<p>Or else.</p>\n<!--more-->\n<hr>\n<h2>The buzz</h2>\n<p>React is famous about its steep learning curve. No wonder — starting from the programming model through data manipulation to user interaction introduced changes which are often paradigm shifts.</p>\n<p>Want the buzzwords?</p>\n<p>Reactive programming, Functional programming, Pure functions, Side effects, State, Hooks, Functional components, Referential equality, Finite state machines, Data driven applications, Memoization, Static type checking — none of these were present in your old framework, perhaps.</p>\n<p>Learning React is not like it was learning Ruby on Rails, Yii, or MVC. It’s more like a fresh start with unlearning first, then re-learning everything from information architecture design to event-based user interfaces.</p>\n<h2>The problem</h2>\n<p>Identify the right leaders.</p>\n<p>A surprisingly compact ecosystem around React makes this process enjoyable. There are a handful of opinion leaders who often share their thoughts which <em>are in line</em>.</p>\n<p>The list goes:</p>\n<ul>\n<li>Robin Wieruch</li>\n<li>Kent C. Dodds</li>\n<li>Dan Abramov</li>\n<li>Dave Ceddia</li>\n<li>(sorry if I skipped you …)</li>\n</ul>\n<p>Once you’ve found the <em>line</em> your learning process will be smooth unless you leave the safe waters. At the edge there is nobody to guide you.</p>\n<h2>An example</h2>\n<p>All the buzz now is around the state. It’s React’s cornerstone and it’s yet not solved.</p>\n<p>Go with Redux? Forget Redux after hooks? Dive into finite state machines? What about MobX? Many job posts require it — it must be popular and useful.</p>\n<p>Apollo started to introduce local state management with GraphQL. What that means for all the other libraries? Will they bundle/push it together with Apollo Client? </p>\n<p>RWieruch just published a tutorial for state management with RxJS. Should I read it? </p>\n<p>There is a new library React Tracked: Super fast global/shared state with context and hooks. Should I read it? Can I trust the author? Is he in the <em>line</em>?</p>\n<h2>The solution</h2>\n<p>I went with finite state machines / Xstate. Why?</p>\n<p>Its leader is trustworthy. Checked videos, blog posts, chatted on twitter, created a test project, advanced it, found a bug, filed a bug, got a fix for it — and all the time every interaction felt so natural.</p>\n<p>Will this choice stand the test of time? I don’t know. But this new piece of knowledge perfectly fits the <em>line</em>. Good UI/UX should be flawless and this tool helps achieve that.</p>\n<p>I’m adding David K. Piano to the list.</p>","frontmatter":{"title":"Identify the right leaders","date":"October 03, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/identify-the-right-leaders/","previous":{"excerpt":"GraphQL comes from the same family as React. And React is functional and reactive.","fields":{"slug":"/is-graphql-functional-and-reactive/"},"frontmatter":{"title":"Is GraphQL functional and reactive?"}},"next":{"excerpt":"That’s nearly impossible today.","fields":{"slug":"/rapid-prototyping-for-graphql-apis/"},"frontmatter":{"title":"Rapid prototyping for GraphQL APIs?"}}}}}