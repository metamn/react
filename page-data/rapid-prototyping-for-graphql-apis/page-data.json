{"componentChunkName":"component---src-templates-blog-post-js","path":"/rapid-prototyping-for-graphql-apis/","webpackCompilationHash":"aa2d89cc8ec631efeaa8","result":{"data":{"site":{"siteMetadata":{"title":":heart: React","author":"Metamn"}},"markdownRemark":{"id":"343a02d0-fae9-5a42-85ef-0225209a06fa","excerpt":"That’s nearly impossible today.","html":"<p>That’s nearly impossible today.</p>\n<!--more-->\n<h2>GraphQL is young</h2>\n<p><a href=\"https://nordicapis.com/is-graphql-moving-toward-ubiquity/\">According to its creator</a> GraphQL is expected to become ubiquitous in 2020-2021. Today is in the phase of being accepted by the large companies.</p>\n<p>The official GraphQL page <a href=\"https://graphql.org/code/#services\">lists</a> only a handful of services ready to build upon. Of them a few are complete solutions — backends as a service — and of them a few are production ready.</p>\n<ul>\n<li>Graphcool - is self hosted</li>\n<li>Reindex - looks empty</li>\n<li>Scaphold - closed down</li>\n<li>Tipe - is in beta</li>\n<li>Hasura - has no pricing plans</li>\n</ul>\n<p>What’s left is Apollo, GraphCMS and AWS AppSync.</p>\n<p>Before checking them let’s see how an ideal GraphQL API backend should look like.</p>\n<h2>The ideal GraphQL API service</h2>\n<p>An ideal service would offer the following features:</p>\n<ol>\n<li>Visual Schema designer</li>\n<li>Automatic database generation based on the schema</li>\n<li>Automatic resolver generation</li>\n<li>Automatic lambda function generation for the resolvers</li>\n<li>Automatic Type / Schema code generation and sync for clients</li>\n</ol>\n<p>In other words:</p>\n<ul>\n<li>One should be able to visually design the data structure</li>\n<li>From that design all else — possible — is automatically generated: database tables, resolvers, lambda functions, schema, types, boilerplate client code</li>\n<li>On client side, during development, when the schema is modified it is automatically synced with the backend.</li>\n</ul>\n<p>That would mean rapid prototyping.</p>\n<h2>Apollo and AWS AppSync</h2>\n<p>Both of them support all requirements except 1.) the visual scheme designer.</p>\n<p>In Apollo all tasks imply (mostly) <a href=\"https://www.apollographql.com/docs/tutorial/introduction/\">manual work</a>. In AWS AppSync + Amplify everything is automated.</p>\n<p>No wonder. Their description and distinctive features are put pretty clear on <a href=\"https://graphql.org/code/#services\">GraphQL.org</a>.</p>\n<blockquote>\n<p>Apollo Engine: A service for monitoring the performance and usage of your GraphQL backend.</p>\n</blockquote>\n<blockquote>\n<p>AWS AppSync: Fully managed GraphQL service with realtime subscriptions, offline programming &#x26; synchronization, and enterprise security features as well as fine grained authorization controls.</p>\n</blockquote>\n<p>One has to choose AWS AppSync then, or dive deep into Apollo to find hidden gems unsurfaced during this quick research.</p>\n<p>However in our collective mindset AWS is for large scale production apps and enterprise use not for rapid prototyping. All plans are paid and every operation is billed.</p>\n<p>GraphCMS to the rescue?</p>\n<h2>Headless CMS is young (and not enough)</h2>\n<p>From the <a href=\"https://docs.google.com/spreadsheets/d/1AmrfMT6a-tT9x4nR__RumuCcT6NedxliFf-76Ocv2pQ/edit?usp=sharing\">list of developer friendly headless CMS services on JAMStack</a> — including Contentful, GraphCMS, Sanity, TakeShape, Prismic, Kentico — only a few experiences worth it.</p>\n<p>Setting up an account and trying to get a GraphQL endpoint on a free plan was tedious or impossible in many times:</p>\n<ul>\n<li>Contentful - No GraphQL on the free plan</li>\n<li>GraphCMS - Except 5.) Automatic code generation and sync — it offers all other features. However these features seems to be undocumented and very fragile.</li>\n<li>Sanity - A strange, download first approach. Skipped for now.</li>\n<li>TakeShape - The GraphQL endpoint works out of the box. Worth experiencing with it further.</li>\n<li>Prismic - GraphQL support has to be asked for / enabled manually by the support team. Worth experiencing with it further.</li>\n<li>WPGraphQL - Works perfect however is tailored to the WordPress data structure. It can be extended of course but WordPress is a specific, not a general purpose CMS.</li>\n</ul>\n<h2>Conclusion</h2>\n<p>Wait for the Headless CMS scene to take off. </p>\n<p>Otherwise, if needed right now, go with AWS. All services can be used for free for a year.</p>\n<p>Is AWS expensive? It’s a Tier 1 service. Probably all other Headless CMS providers on upper tiers are building upon its infrastructure — increasing the bill. </p>\n<h2>Resources</h2>\n<ul>\n<li><a href=\"https://nordicapis.com/is-graphql-moving-toward-ubiquity/\">Is GraphQL Moving Toward Ubiquity?</a></li>\n<li><a href=\"https://graphql.org/code/#services\">GraphQL Services</a></li>\n<li><a href=\"https://www.apollographql.com/docs/tutorial/introduction/\">Apollo Introduction</a></li>\n<li><a href=\"https://docs.google.com/spreadsheets/d/1AmrfMT6a-tT9x4nR__RumuCcT6NedxliFf-76Ocv2pQ/edit?usp=sharing\">A list of developer friendly headless CMS services on JAMStack</a></li>\n</ul>","frontmatter":{"title":"Rapid prototyping for GraphQL APIs?","date":"October 03, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/rapid-prototyping-for-graphql-apis/","previous":{"excerpt":"Or else.","fields":{"slug":"/identify-the-right-leaders/"},"frontmatter":{"title":"Identify the right leaders"}},"next":{"excerpt":"Everything in React rolls around the concept of state.","fields":{"slug":"/on-state/"},"frontmatter":{"title":"On state"}}}}}