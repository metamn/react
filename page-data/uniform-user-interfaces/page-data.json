{"componentChunkName":"component---src-templates-blog-post-js","path":"/uniform-user-interfaces/","webpackCompilationHash":"bded3ecfb0e303cf8797","result":{"data":{"site":{"siteMetadata":{"title":":heart: React","author":"Metamn"}},"markdownRemark":{"id":"a8eb6c71-f052-5f95-a14a-09f1668f0105","excerpt":"A short study.","html":"<p>A short study.</p>\n<!--more-->\n<h2>The need</h2>\n<p>Uniform user interfaces eliminate visual and logical glitches providing a seamless user experience.</p>\n<p>An user interface, when it is uniform it <em>feels</em> complete. Not only has no visible errors but the experience it provides resembles enjoying an artwork.</p>\n<p>Uniform UIs talk about the intent and the mastery of its creators. They persuade. They deliver an important message.</p>\n<h2>The current landscape</h2>\n<p>Few user interfaces are uniform today.</p>\n<p>If we take newspapers — the business segment living off by how successful they present and deliver content — the experience they provide is not seamless.</p>\n<p>Please open Financial Times, Bloomberg, The Spectator, South China Morning Post, The Washington Post, Le Monde Diplomatique — you name it — in a desktop browser, with a regular 1920 x 1080 pixel resolution.</p>\n<p>Unless zoomed to 150-170% the experience is poor. Once the site design is adjusted manually by the user — it becomes infinitely enjoyable.</p>\n<p>A good question is why these sites don’t come in full screen / at maximum usability by default.</p>\n<p>Is it technically impossible? Don’t they have the resources? The necessary will perhaps?</p>\n<h2>The technical aspect</h2>\n<p>I can answer the first question, for sure. Yes, it is possible to make perfect websites.</p>\n<p>The journey is long, the technologies are young. The process takes discipline and grit.</p>\n<p>The theory is simple. It takes a couple of minutes and a few concepts to master — then ready to roll uniform UIs.</p>\n<h2>The theory</h2>\n<p>The following sections present this theory in a compact manner. The narrative is built on a knowledge graph to ensure logical integrity and completeness.</p>\n<p>Relevant parts of the knowledge graph are displayed alongside each slide. The textual content is kept short and precise.</p>\n<h2>User interfaces</h2>\n<p>User interfaces display information enhanced with structure, presentation style and behavior.</p>\n<p>Structure and presentation is familiar from graphic and print design. It defines layout, typography and style.</p>\n<p>Behavior is specific to interactive environments. This dynamic context requires the user interface to handle change — to behave on change.</p>\n<h2>Web user interfaces</h2>\n<p>Web user interfaces rely on a specific technology — the browser — to display information.</p>\n<p>The browser, on its own, uses diverse technologies to deal with structure (HTML), presentation (CSS), and behavior (JavaScript).</p>\n<p>These technologies are standalone yet result in web sites and apps when combined.</p>\n<h2>Binding</h2>\n<p>The method of binding HTML, CSS and JavaScript together is important.</p>\n<p>Every method defines an era in web design and development.</p>\n<p><strong>Classless</strong> (No binding), from the beginning, makes no bounds between HTML, CSS and JavaScript. It leaves content as is, with little manual styling.</p>\n<p><strong>Class-based</strong> binding, a next iteration, connects the parts via HTML attributes (class names, class ids, data attributes). This paradigm is programmable and successful. Google, Facebook, Twitter and everything else was built on it.</p>\n<p><strong>Props</strong>, the web component model, the third iteration, integrates natively all separate parts — HTML, CSS, JavaScript — into a single standalone component. And composes up components via props.</p>\n<p>Web components represent a shift of a similar magnitude like the previous shift from classless to class-based binding.</p>\n<p>Components make uniform user interfaces possible more than ever.</p>\n<h2>API</h2>\n<p>The acronym stands for Application Programming Interface.</p>\n<p>All programmable systems expose an API — a general software artifact with common theory behind. APIs are important. They scale.</p>\n<p>Class and prop-based user interfaces are programmable. They expose an API and they scale.</p>\n<p>It turns out with scale some APIs / UIs lose their uniformity. Namely, open APIs tend to produce non-uniform UIs, closed APIs guarantee uniform UIs.</p>\n<p>Open APIs let developers bind freely, arbitrarily the structure, presentation and behavior. Close APIs impose constraints over the binding assuring integrity and uniformity.</p>\n<p>As bindings, the type of the API is important. Defines common concepts / paradigms like CSS frameworks, component libraries, and design systems.</p>\n<h2>CSS frameworks</h2>\n<p>They sport class-based bindings and an open API approach.</p>\n<p>Class-based bindings make CSS frameworks semi-programmable. HTML and CSS are not programming languages, JavaScript is the only programming language in this stack.</p>\n<p>The open API approach makes CSS frameworks likely produce non-uniform user interfaces.</p>\n<p>Developers can freely assign artifacts offered by a CSS framework to any HTML element.</p>\n<p>This approach doesn’t scale. It requires developers to keep the entire design in a mental model and make sure the model won’t break. Few humans are capable of performing such tasks.</p>\n<p>In spite of being primitive constructs, CSS frameworks are popular and widespread. Atomic CSS, Bootstrap, Foundation, Semantic UI, Tachyons, Tailwind, Bulma — just to name a few of them.</p>\n<p>Their popularity comes from the status quo. During decades they were the only standard to build on.</p>\n<h2>Component libraries</h2>\n<p>They are prop-based and follow the open API approach.</p>\n<p>Prop-based bindings make component libraries fully programmable.</p>\n<p>They mix HTML, CSS into JavaScript resulting in a single component written in a programming language. Components are not limited anymore by a markup or style language, constructs inferior to programming languages.</p>\n<p>The open API approach makes component libraries not necessarily producing uniform user interfaces.</p>\n<p>Again, developers can assign any number of props in any combination to components, which doesn’t scale for the same reasons as presented above: Integrity and uniformity is not programmed but left to the developer to handle with a mental model.</p>\n<h2>Design systems</h2>\n<p>They are prop-based with a closed API.</p>\n<p>They are fully programmable and produce uniform user interfaces.</p>\n<p>They restrict the developer to mistreat the system. Developers must follow strict rules to preserve integrity and uniformity when building up the user interface.</p>\n<p>Changing, extending a design system is only possible at specific entry points. Instead of …</p>","frontmatter":{"title":"Uniform web user interfaces","date":"June 01, 2021"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/uniform-user-interfaces/","previous":{"excerpt":"I optimize for less cognitive load.","fields":{"slug":"/how-i-write-react-code-in-2021/"},"frontmatter":{"title":"How I write React code in 2021"}},"next":null}}}