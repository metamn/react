{"componentChunkName":"component---src-templates-blog-post-js","path":"/on-design-systems-4/","webpackCompilationHash":"aa2d89cc8ec631efeaa8","result":{"data":{"site":{"siteMetadata":{"title":":heart: React","author":"Metamn"}},"markdownRemark":{"id":"7967639e-3865-5e0a-823a-0dfee08ee263","excerpt":"Scalable and consistent UIs.","html":"<p>Scalable and consistent UIs.</p>\n<!--more-->\n<hr>\n<h2>TLDR</h2>\n<ul>\n<li>scalability is growth but has many facets (network, db, software, …)</li>\n<li>\n<p>scalable UI = composable + extensible + usable (learnable, less cognitive load)</p>\n<ul>\n<li>composable is relative easy, goes down to open and closed APIs</li>\n<li>extensibility is hard; it was impossible (?) before FP and ADT, but now it might be the silver bullet</li>\n<li>usability is perhahs, again hard: See Thayer2021TheoryOfRobustAPIKnowledge</li>\n</ul>\n</li>\n<li>scalability always relates back to the API, but that API is confusing / still unclear, it seems to have many facets</li>\n<li>a hint / guess is that FP/ADT-like-API offers extensibility, and gives a pattern / paradigm for composability</li>\n</ul>\n<h2>1 - Previous:</h2>\n<ul>\n<li>consistent UI</li>\n<li>based on a design system (design perspective)</li>\n<li>scalable across protfolio</li>\n<li>by using software development (API, Framework, Language)</li>\n<li>plus usable for DX, UX</li>\n</ul>\n<h2>2 - DS from programming perspective</h2>\n<ul>\n<li>What is a system? Hickey: = Language (API) + Stack (Tokens, CL, DS)</li>\n<li><a href=\"https://www.youtube.com/watch?v=ROor6_NGIWU\">https://www.youtube.com/watch?v=ROor6_NGIWU</a></li>\n</ul>\n<h2>3 - What is scalable?</h2>\n<ul>\n<li>scalability = growth (wikipedia, general)</li>\n<li>specific for network, db, storage, etc</li>\n<li>\n<p>specific for sofware: <a href=\"https://acko.net/blog/on-variance-and-extensibility/\">https://acko.net/blog/on-variance-and-extensibility/</a></p>\n<ul>\n<li>IMPORTANT NOTE HERE: <strong>Extensible</strong> software (API) where parts are arbitrarily replaceable IS NOT POSSIBLE => scalability cannot deal with extensibility, ie scalable !== extensible. Extensible is a very very different topic.</li>\n</ul>\n</li>\n<li>\n<p>specific for UI: <a href=\"https://interconnected.org/home/2021/08/12/notation\">https://interconnected.org/home/2021/08/12/notation</a></p>\n<ul>\n<li><strong>Composable</strong> => shareable, degradable = parts still work</li>\n<li>composable => has semantic primitives, and a gramatics (rules to compose primitives), and not too many primitives (efficiently expressive)</li>\n</ul>\n<blockquote>\n<p>The value of a product is the number of problems it can solve divided by the amount of complexity the user needs to keep in their head to use it.</p>\n</blockquote>\n<ul>\n<li>HTML is scalable</li>\n<li>CSS is not: specificity; parent interferes with children</li>\n</ul>\n</li>\n</ul>\n<p>=> scalability in UI = composable + independent components, not interfeering in each others inner workings</p>\n<h3>Example</h3>\n<ul>\n<li>Button with Link</li>\n<li>Button, Link: composable + independent => scalable</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">default</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">underlined</span><span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">inactive</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> # problem !!! Link should be inactive too</span></code></pre></div>\n<p>=> scalable doesn’t mean consistent; consistency must be enforced</p>\n<h2>4 - Scalable and consistent UIs</h2>\n<ul>\n<li>Back to API, CL and DS + scalability\n=> CL = open API + standalone components => scalable\n=> DS = closed API + standalone components => scalable inside the app context, following the app rules\n=> every app builds on a DS for consistency, which builds on a CL for scalability</li>\n<li>\n<p>In other words:</p>\n<ul>\n<li>App => Rules => DS (closed API, API based on rules)</li>\n<li>CL => No rules, or API theory for components</li>\n<li>Tokens => no rules, or API theory for software (functions)</li>\n</ul>\n</li>\n</ul>\n<p>=> API theory must be checked</p>\n<h3>API theory for components</h3>\n<ul>\n<li>Are the same as for the software ?</li>\n<li>Does FP / ADT is an API theory?</li>\n</ul>\n<h3>API theory or functions / software</h3>\n<ul>\n<li>Deno: 0-2, then a props / object</li>\n<li>0: DS</li>\n<li>1: variant => leads to algebraic data types (ADT)</li>\n<li>1+: extensibility (HARD PROBLEM) + cognitive load</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> spacing <span class=\"token operator\">=</span> <span class=\"token function\">edoSpacing</span><span class=\"token punctuation\">(</span><span class=\"token string\">'margin'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'all'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'default'</span><span class=\"token punctuation\">,</span> Object<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Co cognitive load</span>\n<span class=\"token keyword\">const</span> spacing2 <span class=\"token operator\">=</span> <span class=\"token function\">edoSpacing</span><span class=\"token punctuation\">(</span><span class=\"token string\">'margin'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>boxModelVariant<span class=\"token punctuation\">:</span> <span class=\"token string\">'all'</span><span class=\"token punctuation\">,</span> spacingVariant<span class=\"token punctuation\">:</span> <span class=\"token string\">'double'</span><span class=\"token punctuation\">,</span> returnValueVariant<span class=\"token punctuation\">:</span> Object<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Cognitive load</span></code></pre></div>\n<h2>5 - For web specific technology (how to do it with web tech?)</h2>\n<ul>\n<li>JSX: Graphs, Functional programming</li>\n<li>CSS-in-JS: No more cascade</li>\n<li>TS: Extensibility Input<T> Process<T> Output<T></li>\n<li>React + TS = Algebraic Data Types, Effects</li>\n</ul>\n<h3>ADTs</h3>\n<ul>\n<li>mental model</li>\n<li>under research => many unclear explanations</li>\n<li>relates to FP, Typed languages</li>\n<li>handles uncerainity: instead of endless ifs, just a switch</li>\n<li>enables extensibility: <T> describes the data, metadata and the code too (the constructor) so it should be extensible (<a href=\"https://acko.net/blog/on-variance-and-extensibility/\">https://acko.net/blog/on-variance-and-extensibility/</a>)</li>\n<li>deals with polymorphism, which perhaps is extensibility.</li>\n<li>can be implemented with React and TS, ie a DS can be made functional with ADTs (<a href=\"https://jrsinclair.com/articles/2020/algebraic-structure-of-functions-illustrated-with-react-components/\">https://jrsinclair.com/articles/2020/algebraic-structure-of-functions-illustrated-with-react-components/</a>)</li>\n<li><a href=\"https://overreacted.io/algebraic-effects-for-the-rest-of-us/\">https://overreacted.io/algebraic-effects-for-the-rest-of-us/</a></li>\n<li><a href=\"https://itnext.io/practical-introduction-to-algebraic-datatypes-adts-in-typescript-1cb6952e4c6d\">https://itnext.io/practical-introduction-to-algebraic-datatypes-adts-in-typescript-1cb6952e4c6d</a></li>\n<li><a href=\"https://jrsinclair.com/articles/2020/algebraic-structure-of-functions-illustrated-with-react-components/\">https://jrsinclair.com/articles/2020/algebraic-structure-of-functions-illustrated-with-react-components/</a> !!! VERY IMPORTANT, aka HOW TO MAKE A DS WITH FP AND REACT !!!</li>\n<li><a href=\"https://blog.reesew.io/algebraic-effects-for-react-developers\">https://blog.reesew.io/algebraic-effects-for-react-developers</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Algebraic_data_type\">https://en.wikipedia.org/wiki/Algebraic_data_type</a></li>\n<li><a href=\"https://www.cs.cornell.edu/courses/cs3110/2013sp/lectures/lec04-types/lec04.html\">https://www.cs.cornell.edu/courses/cs3110/2013sp/lectures/lec04-types/lec04.html</a></li>\n<li><a href=\"https://rescript-lang.org/docs/manual/latest/variant\">https://rescript-lang.org/docs/manual/latest/variant</a></li>\n</ul>\n<h2>6 - How it solves real-world problems? (Is it true for real world problems?)</h2>\n<ul>\n<li>Edo2 + NFTDEB => edo3, solving ~15 major issues</li>\n</ul>\n<h2>7 - Is it future proof? (check scalability)</h2>\n<ul>\n<li>New CSS additions should work (container queries, etc) with edo3 and the theory + implementation above</li>\n</ul>\n<hr>\n<h2>Another article</h2>\n<hr>\n<p>8 - What is usable?</p>\n<ul>\n<li>Learnable, Semantic, Grammatical, Efficiently expressive, Suggestive, Intentional, Legible: <a href=\"https://interconnected.org/home/2021/08/12/notation\">https://interconnected.org/home/2021/08/12/notation</a></li>\n<li>learning, usage, documentation: <a href=\"https://faculty.washington.edu/ajko/papers/Thayer2021TheoryOfRobustAPIKnowledge.pdf\">https://faculty.washington.edu/ajko/papers/Thayer2021TheoryOfRobustAPIKnowledge.pdf</a></li>\n</ul>","frontmatter":{"title":"On design systems — 4","date":"November 22, 2022"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/on-design-systems-4/","previous":{"excerpt":"A series of articles.","fields":{"slug":"/on-design-systems/"},"frontmatter":{"title":"On design systems"}},"next":null}}}