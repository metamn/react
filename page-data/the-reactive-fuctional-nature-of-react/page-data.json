{"componentChunkName":"component---src-templates-blog-post-js","path":"/the-reactive-fuctional-nature-of-react/","webpackCompilationHash":"e24f080e93f662bc24cd","result":{"data":{"site":{"siteMetadata":{"title":":heart: React","author":"Metamn"}},"markdownRemark":{"id":"a8dc6cf9-bdf5-575f-891f-66a9e1e668d7","excerpt":"React follows the Functional Reactive Programming paradigm. That’s a shift from the old proactive, imperative approach.","html":"<p>React follows the Functional Reactive Programming paradigm. That’s a shift from the old proactive, imperative approach.</p>\n<!--more-->\n<h2>The context</h2>\n<p>Both paradigms solve the same problem — to build modular, interactive applications — in different ways.</p>\n<p>The old way implemented modularity through tight-coupling and interaction synchronously. The new way implements modularity with loose-coupling and interaction asynchronously.</p>\n<p>Modularity and interaction abstracted to composition and coupling can further elucidate the picture. Composition is about how the components of the system can add up to form a whole, while coupling is about how they communicate with each other.</p>\n<p><a href=\"https://blog.danlew.net/2017/07/27/an-introduction-to-functional-reactive-programming/\">Functional reactive programming</a> deals with composition the functional programming way and with coupling the reactive programming way.</p>\n<h2>Composition</h2>\n<p>Composing up a system from smaller parts is best possible when the underlying components behave predictably:</p>\n<ol>\n<li>They have clear and stable interfaces — input parameters and return values — which can be easily combined.</li>\n<li>\n<p>During execution, while input parameters are transformed into return values</p>\n<p>2.1. The process doesn’t modify the input parameters</p>\n<p>2.2. No external information is used beside input parameters to produce the return value</p>\n<p>2.3. No additional operations are performed beside the planned functionality</p>\n</li>\n</ol>\n<h3>Pure functions</h3>\n<p>Such components in functional programming are called <em>pure functions</em>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * A pure component example\n */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">PureComponent</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/**\n   * ✅ Clear interfaces:\n   * - props are input params, JSX is the return value\n   * ✅ Input params are not modified\n   * ✅ No external information is used beside input params to produce the return value\n   * ✅ No additional operations are performed beside the planned functionality\n   */</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>Pure component props<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Impure functions</h3>\n<p>Having only pure functions in a complex system is almost impossible. Therefore the concept of impure functions and side effects is introduced.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * An impure component example with side effects\n */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ImpureComponent</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/**\n   * ✅ Clear interfaces:\n   * - props are input params, JSX is the return value\n   * ✅ Input params are not modified\n   * - props are protected by React so they can't be easily distorted\n   */</span>\n\n  <span class=\"token comment\">/**\n   * Side effect #1\n   *\n   * ❌ External information is used beside input params to produce the return value\n   */</span>\n  <span class=\"token keyword\">const</span> external <span class=\"token operator\">=</span> <span class=\"token string\">\"External info\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/**\n   * Side effect #2\n   *\n   * ❌ Additional operations are performed beside the planned functionality\n   */</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"props:\"</span> <span class=\"token operator\">+</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span>Impure component props<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span>External info <span class=\"token keyword\">in</span> <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>external<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Side effects, managed</h3>\n<p>When side effects are not avoidable they have to be made <a href=\"https://overreacted.io/writing-resilient-components/#writing-resilient-components\">resilient</a> — not distorting the original application flow.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * Side effects managed through useEffect\n */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">SideEffectsWithUseEffect</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/**\n   * ✅ The `external` side effect is wrapped into a state\n   * ✅ Later it can be managed via `useEffect` which makes it resilient \n   */</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>external<span class=\"token punctuation\">,</span> setExternal<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Initial value ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/**\n   * ✅ By using `useEffect` the rendering of the component is not suspended, the flow is not distorted.\n   * ✅ First the component is rendered with the default value\n   * ✅ After 3 seconds React automatically updates the component with the new value.\n   * (The 3s delay added makes the effect visible on UI)\n   */</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Manages the side effect\n     */</span>\n    <span class=\"token keyword\">const</span> timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setExternal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Initial value replaced with useEffect\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * Cleans up the side effect\n     *\n     * @link https://reactjs.org/docs/hooks-effect.html\n     */</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token comment\">/**\n   * ✅ The `console.log` additional operation side effect is wrapped into the `useEffect` hook\n   * ✅ The Effect Hook lets you perform side effects in function components\n   */</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"props:\"</span> <span class=\"token operator\">+</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>props<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span>Component props<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span>External info <span class=\"token keyword\">in</span> <span class=\"token keyword\">return</span> value <span class=\"token keyword\">with</span> useEffect<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>external<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Coupling</h2>\n<p>Coupling deals with the communication between the components of a system. To make a system scale communication has to be in the same effective as composition.</p>\n<p>Reactive programming achieves this through:</p>\n<ol>\n<li>\n<p>Isolation:</p>\n<p>1.1 Components are aware of, and care about their own problems only</p>\n<p>1.2 Components does not interfere with each other’s inner workings</p>\n</li>\n<li>\n<p>Asynchronous communication:</p>\n<p>2.1 Components subscribe to events</p>\n<p>2.2 They react when an event happens</p>\n<p>2.3 They return an observable — which emits events other components can subscribe to.</p>\n</li>\n</ol>\n<h3>Isolation</h3>\n<p>In React isolation is about the local state — components can update only their own state and can’t modify other component’s state.</p>\n<h3>Asynchronous communication</h3>\n<p>In React asynchronous communication is all about hooks. Components communicate with each other and the surrounding ecosystem — the local data store, the local cache store, the database — via the hooks mechanism.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">|-----------------|-------------------|\n| Hook            | Ecosystem         |\n|-----------------| ------------------|\n| useContext      | Local data store  |\n| useMemo         | Local cache store |\n| useCallback     | Other components  |\n| useQuery,       |                   |\n| useMutation,    |                   |\n| useSubscription | GraphQL database  |\n|-------------------------------------|</code></pre></div>\n<h2>Wrapping up</h2>\n<p>Using reactive and functional programming concepts React and its building blocks — props, state, hooks, side effects, pure components — can be put in a general context.</p>\n<p>A general context which is a great help when mapping up the big picture.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">|================|                            |================|\n| Component 1    |                            | Component 2    |\n|================|                            |================|\n| Props          |                            | Props          |\n|----------------|                            |----------------|\n| Local state    |                            | Local state    |\n|----------------|                            |----------------|\n|                | &lt;-------- Hooks --------&gt;  |                |\n|                | &lt;-------- Hooks --------&gt;  |                |\n| Side effects   | &lt;-------- Hooks --------&gt;  | Side effects   |\n|                | &lt;-------- Hooks --------&gt;  |                |\n|                | &lt;-------- Hooks --------&gt;  |                |\n|----------------|                            |----------------|\n| Return JSX     |                            | Return JSX     |\n|================|                            |================|\n\n     ^                 ^                ^                ^\n     |                 |                |                |\n     | Hooks           | Hooks          | Hooks          | Hooks\n     |                 |                |                |\n|----------|     |-----------|     |----------|     |-----------|\n| State    |     | Data      |     | Cache    |     | UI        |\n| store    |     | store     |     | store    |     | Events    |\n|----------|     |-----------|     |----------|     |-----------|</code></pre></div>\n<h2>Resources</h2>\n<ul>\n<li><a href=\"https://blog.danlew.net/2017/07/27/an-introduction-to-functional-reactive-programming/\">An Introduction to Functional Reactive Programming</a></li>\n<li><a href=\"https://overreacted.io/writing-resilient-components/#writing-resilient-components\">Writing Resilient Components</a></li>\n</ul>","frontmatter":{"title":"The reactive, functional nature of React","date":"October 08, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/the-reactive-fuctional-nature-of-react/","previous":{"excerpt":"A way to think about Information Architecture in React terms.","fields":{"slug":"/ontology-taxonomy-choreography/"},"frontmatter":{"title":"Ontology, taxonomy, choreography"}},"next":{"excerpt":"How joy and simplicity was brought back into our lives by the Facebook crew.","fields":{"slug":"/were-gonna-program-like-its-1999/"},"frontmatter":{"title":"We're gonna program like it's 1999"}}}}}