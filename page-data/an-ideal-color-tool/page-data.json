{"componentChunkName":"component---src-templates-blog-post-js","path":"/an-ideal-color-tool/","webpackCompilationHash":"d7e219c48becb2cda1c4","result":{"data":{"site":{"siteMetadata":{"title":":heart: React","author":"Metamn"}},"markdownRemark":{"id":"9657d0c3-b5be-506e-9629-c5acb2bb8d55","excerpt":"A tool to generate color palette for sites and apps is always welcome. Yet one perfectly tailored to web is missing.","html":"<p>A tool to generate color palette for sites and apps is always welcome. Yet one perfectly tailored to web is missing.</p>\n<!--more-->\n<h2>The basic need</h2>\n<p>We need at least two colors to create a user interface. A text color and the background color.</p>\n<p>These can be easily chosen; we just have to be sure their color contrast ratio is good enough to be legible, visible for all kind of audiences, even for those with visual impairments.</p>\n<p>Two colors are good enough for a blog.</p>\n<p>When more content types are present — buttons for call to action; multiple visual sections like hero, features, testimonials — two colors might not be enough.</p>\n<h2>A monochromatic palette</h2>\n<p>With two colors we get additionally another good few color combinations. First an inverted color scheme, then a lot others in between.</p>\n<p>These combinations could be well enough for a basic landing page or a simple marketing site.</p>\n<p>Hero is set with inverted colors, the button / call to action on hero with the default colors.\nLater, less important sections can have in between colors, such as gray in the case of black / white primary colors.</p>\n<h2>+1 color</h2>\n<p>It’s so refreshing to break out a monochromatic color scheme with a vivid call to action button. That’s why user interfaces tend to be built on more than two colors.</p>\n<p>When a new color is added to the two basic colors the need is either to dominate them, or be dominated by them.</p>\n<p>A call to action should dominate the existing color scheme by bringing its content forward, closer to the viewer.</p>\n<p>A less important content section should sink in the background with a dominated color.</p>\n<p>Theory says warm colors dominate, cool colors sink. On the classic color wheel warm colors are on the left: red, orange, yellow — cool colors on the right: violet, blue, green.</p>\n<h2>Color properties</h2>\n<p>To pick the perfect red for an existing monochromatic color scheme we might need math. There are tons of reds — based on which criteria one can affirm <em>that</em> red is the perfect red for this scheme?</p>\n<p>To make colors quantifiable color models and color spaces like RGB or CMYK are used.</p>\n<p>Each model describes every color with certain properties like:</p>\n<ul>\n<li>Luminosity - an absolute property</li>\n<li>Temperature - an absolute property</li>\n<li>Saturation - a relative property describing how many <code class=\"language-text\">gray</code> is in the color</li>\n<li>Lightness - a relative property describing how many <code class=\"language-text\">white</code> and <code class=\"language-text\">black</code> is in the color</li>\n<li>Contrast - a relative property to a third color</li>\n</ul>\n<p>With these properties the <em>perfect red</em> can be reformulated to <em>a red with the same saturation and lightness as the current color scheme, and, with a 4.5 contrast to the background color</em>.</p>\n<p>Color models can be specially tailored to mediums like print (Pantone, CMYK) or monitor screens (RGB, HSL). And they might present surprises. In CMYK <code class=\"language-text\">blue</code> mixed with <code class=\"language-text\">yellow</code> gives <code class=\"language-text\">green</code>, in RGB gives <code class=\"language-text\">gray</code>.</p>\n<p>It’s important to choose a suitable color model for screen user interfaces.</p>\n<h2>An ideal tool</h2>\n<h3>1—Computable color model</h3>\n<p>An ideal tool to create a perfect color scheme would first of all come with a computable, programmable color model.</p>\n<p>One should be able to use code to generate a consistent color palette, and think about colors in the same way thinks about other programming artifacts like data and algorithms.</p>\n<h3>2—Preloaded content types</h3>\n<p>An ideal tool should come preloaded with different content types. For a simple blog, for a simple landing page, for a full product marketing site, and so on.</p>\n<p>With them a live test can be performed to see how a color scheme works.</p>\n<p>Graphic artists have their own tools like <a href=\"https://color.adobe.com/create/color-wheel/\">Adobe Color Wheel</a> which might be great to design posters and flyers but surely not intuitive enough to design text based user interfaces.</p>\n<p><a href=\"http://paletton.com/\">Paletton</a> recognized this flaw and added a feature to preview a palette in a real webpage scenario. However, it’s awful.</p>\n<p><a href=\"https://material.io/tools/color/\">Google Color Tool</a> is far better. It’s a good start but gives not enough details.</p>\n<h3>3—Monochromatic palette generator</h3>\n<p>Once we’ve picked up the two primary colors we should be able to see how many additional color pairs we’ve got with these colors.</p>\n<p>Google’s Color Tool gives us two hints (Light, Dark) but there is more play here.</p>\n<h3>4—A special color wheel</h3>\n<p>Finally we need a color wheel to help us choose warm and cold colors additional to our existing monochromatic scheme.</p>\n<p>Paletton has such a fine tune mechanism for the generated palette but not to set the color wheel into a state where only corresponding new colors can be picked up.</p>\n<h2>Resources</h2>\n<ul>\n<li><a href=\"http://metamn.io/colord/\">http://metamn.io/colord/</a></li>\n<li><a href=\"https://github.com/metamn/color\">https://github.com/metamn/color</a></li>\n<li><a href=\"https://color.adobe.com/create/color-wheel/\">Adobe Color</a></li>\n<li><a href=\"http://paletton.com/\">Paletton</a></li>\n<li><a href=\"https://material.io/tools/color\">Google Material Design Color Tool</a></li>\n</ul>","frontmatter":{"title":"An ideal color tool","date":"January 08, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/an-ideal-color-tool/","previous":{"excerpt":"To have an ideal grid where all elements are both vertically and horizontally aligned is possible. And a bit difficult.","fields":{"slug":"/setting-up-a-typographic-grid-with-react/"},"frontmatter":{"title":"Setting up a typographic grid with React"}},"next":{"excerpt":"One should be able to use code to work with colors, and think about colors in the same way thinks about other programming artifacts like data and algorithms.","fields":{"slug":"/rgb-vs-hsl-another-round/"},"frontmatter":{"title":"RGB vs. HSL: another round"}}}}}