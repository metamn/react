{"componentChunkName":"component---src-templates-blog-post-js","path":"/my-current-stack/","webpackCompilationHash":"4e1985a14b92e7367e74","result":{"data":{"site":{"siteMetadata":{"title":":heart: React","author":"Metamn"}},"markdownRemark":{"id":"d6801519-c5bd-5de8-95cb-d4a9607b1e6b","excerpt":"For highly interactive, static websites without API.","html":"<p>For highly interactive, static websites without API.</p>\n<!--more-->\n<hr>\n<p>React <a href=\"http://metamn.io/react/things-ive-learnt-in-2020/\">works</a> for a list of use cases.</p>\n<p>One of these is <a href=\"https://en.wikipedia.org/wiki/Interactive_design\">interactive design</a> built on heavy user interactions in a different way than apps do.</p>\n<p>Instead of data input the interaction is continuous through gestures, information transformation, real-time content updates from external sources.</p>\n<p>For this scenario let me present a highly opinionated, months-in-the-making stack.</p>\n<h2>Typescript</h2>\n<p><code class=\"language-text\">You&#39;ll know when you&#39;ll need it</code> — <a href=\"https://overreacted.io/\">Dan Abramov</a> once said and his prophecy came true.</p>\n<p>When there is no API in a project, there is no single source of truth, there is no data layer.</p>\n<p>Typescript to the rescue. Typescript is capable to model the business domain and provide a stable, scalable foundation for the UI. The end result is not less than a database with an API.</p>\n<p>In plus, as a bonus, everything Typescript runs through a real-time linter to detect semantic and syntactic errors while writing code.</p>\n<p>And the Typescript learning curve is bearable.</p>\n<h2>Emotion</h2>\n<p>If React then Javascript / Typescript. On all fronts.</p>\n<p>Structure and behaviour is already JSX. Presentation, styling should be Javascript, too.</p>\n<p>It’s better to have <a href=\"https://emotion.sh/docs/object-styles\">style objects</a> and functions—pure Javascript code—than other constructs written on another language—CSS. It’s better to use a programming language for styling.</p>\n<p>From all the major CSS-in-JS libraries Emotion is singular in <a href=\"https://github.com/osequi/hacks/blob/master/CSS-in-JS.md\">supporting</a> props in keyframe animations following the object syntax.</p>\n<p>In other words with Emotion one can write anything CSS using Javascript.</p>\n<h2>Jest and Testing Library</h2>\n<p>Interactive design doesn’t require end-to-end testing where an user flow runs across pages to complete.</p>\n<p>Unit testing is good enough. Out-of-the-box tools like Jest, React Testing Library, ts-jest extended with special libraries for hooks and responsiveness do the job.</p>\n<h2>MDX</h2>\n<p>Storybook still doesn’t fully deliver. In ten-out-of-ten projects where used it broke after a promising start. Reasons vary.</p>\n<p>MDX together with unit tests are a complete Storybook replacement. Tests verify the scenarios while MDX presents them an easy and always working way.</p>\n<p>For standard API documentation there is the great <a href=\"https://github.com/SoftwareBrothers/better-docs\">Better Docs</a> generator based on JSDoc.</p>\n<h2>Next.js</h2>\n<p>Among frameworks Create React App is the standard. No wonder, it’s backed by the creator of React, Facebook.</p>\n<p>When generating the site on server side—Next.js provides the best support.</p>\n<p>Interactive design sites present valuable content. That content must be understandable by machines, too. This is where SEO and static rendering comes in picture.</p>\n<p>Gatsby was a contender. Their outdated philosophy <code class=\"language-text\">move fast and break things</code> makes the source code of this blog, running on Gatsby, rubbish. Dare to buid on it.</p>\n<h2>State</h2>\n<p>It would be nice to have <a href=\"https://xstate.js.org/\">XState</a> to reduce concerns around state as Typescript does around code.</p>\n<p>The high learning curve is an impediment to that. Finite state machines are a mathematical model of computation. As such, comprehensive.</p>\n<p>For a banal <a href=\"https://github.com/davidkpiano/xstate/issues/1702#issuecomment-740139365s\">menu animation</a> one must be familiar with transient states and guards.</p>\n<h2>Packaging</h2>\n<p>No packaging, monorepo, publishing to <code class=\"language-text\">npm</code>. Yet.</p>\n<p>Lerna, Yarn Workspaces introduce too much devops, tweaks, headache. They don’t worth it for now.\nCreate React Library and Bit.dev: bloated. </p>\n<p>What works is <a href=\"https://nextjs.org/docs/advanced-features/module-path-aliases\">absolute imports and module path aliases</a> offered by Typescript and Next.js</p>\n<h2>Summing up</h2>\n<p>The React ecosystem is fragile. All parts work on their own but break when combined.</p>\n<p>Where two parts meet, a grey zone forms. Bugs in the grey zones doesn’t belong to any of the maintainers. This is where stack building implies Herculean efforts often with no results.</p>","frontmatter":{"title":"My current stack","date":"December 21, 2020"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/my-current-stack/","previous":{"excerpt":"React—used appropriately—works.","fields":{"slug":"/things-ive-learnt-in-2020/"},"frontmatter":{"title":"Things I've learnt in 2020"}},"next":{"excerpt":"A series of articles.","fields":{"slug":"/on-design-sytems/"},"frontmatter":{"title":"On design systems"}}}}}